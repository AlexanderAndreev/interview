# WEB APPLICATION
	Web Archive или Web Application Archive — формат файла, описывающий, как полное веб-приложение упаковывается в соответствии со спецификацией Java-сервлетов в файл в формате JAR или ZIP. Такие файлы имеют расширение «.war» и поэтому называются ещё «WAR-файлами».
Преимущества WAR-файлов:
	- лёгкость разработки, тестирования и развертывания
	- версию развёрнутого приложения легко идентифицировать
	- Все J2EE-контейнеры поддерживают WAR-файлы
/index.html
/guestbook.jsp
/images/logo.png
/WEB-INF/web.xml
/WEB-INF/classes/org/wikipedia/Util.class
/WEB-INF/classes/org/wikipedia/MainServlet.class
/WEB-INF/lib/util.jar
/META-INF/MANIFEST.MF
	В каталоге «WEB-INF» находится так называемый дескриптор развёртывания («Deployment Descriptor»: в свободном переводе — «инструкция по применению») по имени «web.xml», определяющий все сервлеты и другие свойства Web-приложения. Если приложение содержит только JSP-файлы, этот файл не строго обязателен.
	Директория /WEB-INF/classes находится в classpath ClassLoader. Эти java-файлы с расширением .class будут загружены, когда веб-приложение загрузится и начнет выполняться. Любые файлы JAR, находящиеся в каталоге /WEB-INF/lib, также будут помещены в classpath.
	Чтобы веб-контейнер (веб-сервер) смог прочитать дескриптор развертывания и начал перенаправлять запросы на данное приложение, необходимо развернуть (deploy) WAR-файл в контейнер. Одним из вариантов выполнения развёртывания является копирование WAR-файла в autodeploy-каталог веб-контейнера.
	WAR может быть подписан электронной цифровой подписью так же, как и JAR-файл, чтобы подтвердить аутентичность кода.



# WEB.XML
	Дескриптор развертывания — это конфигурационный файл артефакта, который будет развернут в контейнере сервлетов. В спецификации Java EE дескриптор развертывания описывает то, как компонент, модуль или приложение (такое, как веб-приложение или приложение предприятия) должно быть развернуто.
	Этот конфигурационный файл указывает параметры развертывания для модуля или приложения с определенными настройками, параметры безопасности и описывает конкретные требования к конфигурации. Для синтаксиса файлов дескриптора развертывания используется язык XML.
	Для веб-приложений дескриптор развертывания должен называться web.xml и находиться в директории WEB-INF, в корне веб-приложения. Этот файл является стандартным дескриптором развертывания, определенным в спецификации Сервлетов. 
<web-app>
     <servlet>
         <servlet-name>HelloServlet</servlet-name>
         <servlet-class>mypackage.HelloServlet</servlet-class>
     </servlet>
 
     <servlet-mapping>
         <servlet-name>HelloServlet</servlet-name>
         <url-pattern>/HelloServlet</url-pattern>
     </servlet-mapping>
 
     <resource-ref>
         <description>
             Resource reference to a factory for javax.mail.Session
             instances that may be used for sending electronic mail messages,
             preconfigured to connect to the appropriate SMTP server.
         </description>
         <res-ref-name>mail/Session</res-ref-name>
         <res-type>javax.mail.Session</res-type>
         <res-auth>Container</res-auth>
     </resource-ref>
 </web-app>




# SERVER TYPES
    Сервер приложений  - компонентный сервер, исполняющий приложения для работы с клиентом. Он предоставляет разработчику стандартный фреймворк, контейнер сервлетов итд.
    Веб-сервер – узкоспециализированный сервер, взаимодействующий  с клиентом по протоколу http. Отличается от сервера приложений узкой специализацией.
    Пример веб-сервера  - tomcat, сервера приложений – JBOSS и Glassfish.



# HTTP
	При использовании метода POST данные передаются в зашифрованном виде. В GET есть ограничение на размер передаваемой в запросе строки.
    По умолчанию выполняется GET.



# COOKIES
	Небольшой фрагмент данных, отправленный веб-сервером и хранимый на компьютере пользователя. Веб-клиент (обычно веб-браузер) всякий раз при попытке открыть страницу соответствующего сайта пересылает этот фрагмент данных веб-серверу в составе HTTP-запроса. Применяется для сохранения данных на стороне пользователя, на практике обычно используется для:
	- аутентификации пользователя;
	- хранения персональных предпочтений и настроек пользователя;
	- отслеживания состояния сеанса доступа пользователя;
	- ведения статистики о пользователях.

	Установка куки:
	- Запрашивая страницу, браузер отправляет веб-серверу короткий текст с HTTP-запросом.
	- Сервер отвечает, отправляя запрашиваемую страницу вместе с текстом, содержащим HTTP-ответ. Там может содержаться указание браузеру сохранить куки (Set-Cookie: name=value)
	- Строка Set-cookie отправляется лишь тогда, когда сервер желает, чтобы браузер сохранил куки. В этом случае, если куки поддерживаются браузером и их приём включён, браузер запоминает строку name=value (имя = значение) и отправляет её обратно серверу с каждым последующим запросом. (Cookie: name=value)
	- Этот запрос отличается от первого запроса тем, что содержит строку, которую сервер отправил браузеру ранее. Таким образом, сервер узна́ет, что этот запрос связан с предыдущим. Сервер отвечает, отправляя запрашиваемую страницу и, возможно, добавив новые куки.

	Куки также могут устанавливаться программами на языках типа JavaScript, встроенными в текст страниц, или аналогичными скриптами, работающими в браузере. В JavaScript для этого используется объект document.cookie. Например, document.cookie = "temperature=20" создаст куки под именем «temperature» и значением 20.



# HTTP SESSION
	Это соединение клиента с сервером, устанавливаемой на определённое время, за которое клиент может сделать любое количество запросов к серверу (на стороне сервера).
	Большинство протоколов предусматривают установление TCP-сессии, в ходе которой один раз происходит авторизация, и дальнейшие действия выполняются в контексте этой авторизации. HTTP же устанавливает отдельную TCP-сессию на каждый запрос; в более поздних версиях HTTP было разрешено делать несколько запросов в ходе одной TCP-сессии, но браузеры обычно запрашивают только страницу и включённые в неё объекты (картинки, каскадные стили и т. п.), а затем сразу разрывают TCP-сессию. Для поддержки авторизованного (неанонимного) доступа в HTTP используются cookies; причём такой способ авторизации позволяет сохранить сессию даже после перезагрузки клиента и сервера.


# SERVLET
    Контейнер сервлетов -  программа, управляющая жизненным циклом сервлетов.
    Сервлет – класс, отвечающий за обработку запросов клиента и отправку ответов. Основные методы сервлета: init() – запускается сразу после  загрузки сервлета в память; service() – вызывается для обработки каждого запроса; destroy() – выполняется перед выгрузкой сервлета из памяти.
    Жизненный цикл сервлета: им управляет контейнер сервлетов, при первом обращении к сервлету происходит его загрузка в память и вызывается  метод init(). На протяжении работы приложения происходят вызовы методы service() для обработки запросов клиента. По завершению работы приложения вызывается метод destroy() и сервлет выгружается из памяти.

    При проектировании сервлетов нужно уделить особое внимание тому, чтобы сервлет был thread-safe. Не использовать переменные экземпляра, например. Либо синхронизировать к ним доступ. В общем, рассчитывайте на то, что методы сервлета будут вызываться из разных потоков.

    Для обращения к сервлету из браузерной строки надо написать маппинг сервлета. Метод сервлета нельзя напрямую вызвать из браузерной строки. Для вызова из браузерной строки конкретного сервлета в строке браузера пишется ip-aдрес хоста, номер порта, имя приложения и маппинг сервлета.
    С помощью HttpServletRequestWrapper и HttpServletResponseWrapper можно изменять запрос и ответ соответственно.
    Фильтры выполняются в той последовательности, в которой они заданы в FilterChain.


# JSP
	JSP – веб-страница, представляющая собой комбинацию статического html и java-кода. 
    Жизненный цикл JSP. Исходный код jsp, к которой идёт запрос от клиента, анализируется и парсится jsp_engine, далее создаётся временный сервлет, основанный на коде jsp. Далее сервлет компилируется. Запускаются методы init() и jsp_service(). После обработки методом jsp_service() отсылается ответ клиенту в виде html.



# FORWARD/REDIRECT
    - Forward осуществляется переход на новую страницу, но запрос не меняется (на сервере). Передает на сервере запрос на другой url.
    - Redirect создаётся новый запрос, все параметры, хранившиеся в старом удаляются.  Также редирект ‘убивает‘ переменные сессии (через клиента). Меняет адрес странички. То есть при редиректе 1 запроса сервер возвращает ответ клиенту у которого меняется урл в браузере и браузер опять отсылает запрос.