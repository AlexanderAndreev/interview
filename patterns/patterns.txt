Выделите аспекты приложения, которые могут изменяться, и отделите их от тех, которые всегда остаются постоянными. Все паттерны обеспечивают возможность изменения некторой части системы независимо от других частей. 

- Инкапсулируйте то, что изменяется.
- Отдавайте предпочтение композиции перед наследованием.
- Программируйте на уровне интерфейсов, а не реализации.
- Стремитесь к слабой связанности взаимодействующих объектов.
- Классы должны быть открыты для расширения, но закрыты для изменения.
- Код должен зависеть от абстракций, а не от конкретных классов.
- Принцип минимальной информированности: общайтесь только с близкими друзьями.
- Не вызывайте нас - мы вас сами вызовем.
- Класс должен иметь только одну причину для изменения.

ПАТТЕРН СТРАТЕГИЯ определяет семейство алкгоритмов, инкапсулирует каждый из них и обеспечивает их взаимозаменяемость. Он позволяет модифицировать алгоритмы независимо от их использования на стороне клиента. "Для реализации разных вариантов поведения использоуется паттерн Стратегия". Из этой фразы мы узнаем, что поведение инкапсулируется в отдельном наборе классов, который легко расширяется и изменяется - при необходимости даже во время выполнения.

ПАТТЕРН НАБЛЮДАТЕЛЬ определяет отношение "один-ко-многим" между объектами таким образом, что при изменении состояния одного объекта происходит автоматическое попвещение и обновление всех зависмых объектов. Если два объекта могут взаимодействовать, не обладая практически никакой информацией друг о друге, такие объекты называют слабосвязанными. В архитектуре паттерна Наблюдатель между субъектами и наблюдателями существует слабая связь.

ПАТТЕРН ДЕКОРАТОР динамически наделяет объект новыми возможностями и является гибкой альтернативой субклассированию в области расшриения функциональности. (Пример: классы ввода/вывода Java.)

ПАТТЕРН ФАБРИЧНЫЙ МЕТОД определяет интерфейс создания объекта, но позволяет субклассам выбрать класс создаваемого экземпляра. Таким образом, Фабричный Метод делегирует операцию создания экземпляра субклассам.

ПАТТЕРН АБСТРАКТНАЯ ФАБРИКА предоставляет интерфейс создания семейств взаимосвязанных или взаимозависимых объектов без указания их конкретных классов.

Для создания объектов Фабричным Методом необходимо расширить класс и переопределить фабричный метод. Он создает объекты.. Вся суть паттерна Фабричный Метод заключается в использовании субкласса, который создает объекты за вас. Клиенты достаточно знать абстрактный тип, который они используют, а субкласс имеет дело с конкретными типами.
Абстактная фабрика предоставляет абстрактный тип для создания семейств продуктов. Субклассы этого типа определяют способ созадния продуктов. Чтобы использовать фабрику, вы создаете экземпляр и передаете его коду, наисанному для абстрактного типа. Таким образом, как и с Фабричным Методом, мои клиенты отделяются от конкретных продуктов.

ПАТТЕРН ОДИНОЧКА гарантирует, что класс имеет только один экземпляр, и предоставляет глобальную точку доступа к этому экземпляру.

ПАТТЕРН КОМАНДА - инкапсулирует запрос в виде объекта, делая возможной параметризацию клиентских объектов с другими запросами, организацию очереди или регистрацию запросов, а также поддержку отмены операций.

ПАТТЕРН АДАПТЕР преобразует интерфейс класса к другому интерфейсу, на который рассчитан клиент. Адаптер обеспечивает совместную работу класов, невозможную в обычных условиях из-за несовместимости интерфейсов.

ПАТТЕРН ФАСАД предоставляет унифицированный интерфейс к группе интерфейсов подсистемы. Фасад определяет высокоуровневый интерфейс, упрощающий работу с подсистемой.

ПАТТЕРН ШАБЛОННЫЙ МЕТОД задает "скелет" алгоритма в методе, оставляя определение реализации некоторых шагов субклассам. Субклассы могут переопределять некоторые части алгоритма без изменения его структуры.

ПАТТЕРН ИТЕРАТОР предоставляет механизм последовательного перебора элементов коллекции без раскрытия ее внутреннего представления.

ПАТТЕРН КОМПОНОВЩИК объединяет объекты в древовидные структуры для представления иерархий "часть/целое". Компоновщик позволяет клиенту выполнять однородные операции с отдельными объектами и их совокупностями.



