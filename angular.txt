# Почему AngularJS?
HTML отлично подходит для описания статичных документов, но спотыкается при попытке описать динамические виды в веб-приложениях. AngularJS позволяет расширить синтаксис HTML. В результате код получается выразительным, читаемым, и легко поддерживается.

# Расширяемость
AngularJS — это набор инструментов для построения фреймворка, наиболее подходящего для создания веб-приложения. Он расширяем и отлично взаимодействует с другими библиотеками. Любая особенность может быть изменена или заменена в соответствии с уникальным путем развития и потребностями вашего приложения.

# Связывание данных
Связывание данных — это способ автоматического обновления вида при изменении модели, а также обновление модели при изменении вида. Удивительно, но это исключает DOM-манипуляции из списка вещей, о которых нужно беспокоиться.

# Контроллер
Контроллеры добавляют поведение DOM-элементам. AngularJS позволяет описать поведение в простой форме без шаблонного обновления DOM, регистрации колбэков или сканирования изменений модели.

# Ясный JavaScript
В отличие от других фреймворков, нет необходимости наследоваться от собственных типов; оборачивать модель методами доступа. Только старый добрый JavaScript. Это позволяет легко тестировать код, обслуживать, повторно использовать и опять же освободить от шаблонов.

# Внешнее связывание
Внешняя связь показывает в каком месте приложения находится пользователь. Это полезно, так как пользователи смогут создавать закладки и отправлять ссылки на элементы приложения по электронной почте. Для многостраничных приложений это не проблема, но AJAX-приложения по своей природе не такие. AngularJS сочетает в себе преимущества внешнего связывания с поведением десктопного приложения.

# Валидация форм
Проверка форм на стороне клиента важна, т.к. делает приложение удобнее для пользователей. AngularJS позволяет задавать правила проверки формы без необходимости писать JavaScript код. Пишешь меньше кода — пьешь больше пива.

# Обмен данными
AngularJS содержит сервисы высокоуроневого XHR, что существенно упрощает код. Мы обернули XHR, чтобы предоставить исключительное управление и обещание. Обещание еще больше упростить код при обработке асинхронно-полученных данных. Это позволяет назначать свойства синхронно, тогда как получение на самом деле асинхронное.

# Встраиваемость
AngularJS превосходно работает с другими технологиями. Вы сами выбираете что использовать из AngularJS в приложении. Большинство фреймворков требуют полного контроля над всей страницей (приложением). Эта же страница состоит из нескольких AngularJS приложений встроенных в нее. Так как AngularJS не требует контроля над всей страницей, то несколько приложений могут быть запущены на одной странице без необходимости использовать iframe. Рекомендуем открыть исходный код этой страницы (view-source) и посмотреть как он выглядит.

# Внедряемость
Внедрение зависимости (Dependency injection) в AngularJS позволяет декларативно описывать взаимосвязи внутри приложения. Это означает что приложение не нуждается в методе main(), который, как правило, создает беспорядок. Внедрение зависимостей является одной из ключевых особенностей AngularJS. Это означает что любой компонент, который не соответствует вашим потребностям, может быть легко заменен.

# Тестируемость
AngularJS был спроектирован так, чтобы максимально облегчить тестирование. Он отделяет представление от поведения, уже имеет в комплекте mock'и, и по полной использует внедрение зависимости. Так же в AngularJS встроен движок для комплексных (end-to-end) тестов, который избавляет от множества проблем, так он знает как устроен AngularJS изнутри.



=====================
=====================

# Формы
Основной директивой понимающей двустороннее связывание данных является ngModel. Директива NgModel предусматривает двустороннее связывание данных путем синхронизации модели с представлением, а также вида с моделью. Кроме того, она предоставляет API для других директив, чтобы расширить их поведение.

Для предоставления возможности оформления форм так же, как и элементов управления, ngModel добавляется такие CSS классы:
ng-valid
ng-invalid
ng-pristine
ng-dirty

Форма - это экземпляр объекта FormController. Экземпляр формы может быть опционально опубликован в область видимости с использованием атрибута name. Также элемент управления является экземпляром NgModelController. Экземпляр элемента управления также может быть опубликован в экземпляре формы с использованием атрибута name. Это означает, что внутреннее состояние и формы и элемента управления доступны для связывания в представлении путем использования стандартных примитивов.

Это позволяет нам расширить пример выше такой функциональностью:
- кнопка RESET активизируется только если в форме что-то изменилось
- кнопка SAVE активизируется только если в форме что-то изменилось и форма при этом валидна
- собственные сообщения об ошибках для user.email и user.agree

Angular предоставляет базовый функционал для наиболее распространённых типов html5-полей - text, number, url, email, radio, checkbox. Также он поддерживает некоторые директивы для валидации (required, pattern, minlength, maxlength, min, max).
Для того чтобы определить собственный валидатор, вы должны определить директиву, которая добавит настраиваемую валидационную функцию в контроллер ngModel. Чтобы получить этот контроллер, просто укажите его среди зависимостей


ЗАГРУЗКА ANGULAR
Браузер загружает HTML-документ и строит DOM.
Браузер загружает скрипт angular.js
Angular ожидает события DOMContentLoaded
Angular ищет ng-app директиву, которая определяет область действия фреймворка
Модуль, указанный в директиве ng-app (если таковой имеется), используется для настройки $injector
$injector используется для создания сервиса $compile, а заодно и $rootScope
Сервис $compile используется для компиляции DOM и связки его с $rootScope

Область видимости отвечает за отслеживание изменений в определенной части модели и обеспечивает контекст исполнения для выражений. Области видимости вкладываются друг в друга, создавая иерархическую структуру, тесно связанную со структурой DOM.

Директивы — это изменение поведения или преобразование модели DOM, связанное с пользовательским атрибутом, именем элемента, или css классом. Директивы позволяют расширять HTML синтаксис, в декларативной форме. 

Фильтры преобразуют данные. Обычно они используются в связке с текущей локалью пользователя, чтобы форматировать данные в специфичный для данной локализации формат.

Инжектор — это надстройщик всех сервисов. Для каждого Angular-приложения существует один и только один инжектор. Инжектор позволяет находить экземпляры объектов по их именам. Инжектор поддерживает внутри себя кэш объектов, таким образом несколько вызовов поиска какого-либо объекта вернут один и тот же экземпляр. Если инжектор ничего не находит, он просит фабрику создать новый экземпляр.

Модуль — это способ настройки фабричного экземпляра инжектора (известного как provider) по просьбе инжектора.

// Создание модуля
var myModule = angular.module('myModule', [])
 
// Конфигурация инжектора
myModule.factory('serviceA', function() {
  return {
    // поместите сюда код для создания объекта
  };
});
 
// создание инжектора и конфигурация его из модуля 'myModule'
var $injector = angular.injector(['myModule']);
 
// получение объекта из инжектора по имени
var serviceA = $injector.get('serviceA');
 
// всегда истинно из-за внутреннего кэша экземпляров
$injector.get('serviceA') === $injector.get('serviceA');



Одним из важных способов, которым Angular упрощает веб-разработку, является увеличение уровня абстракции между разработчиком и большинством низкоуровневых веб-разработки приложений. Angular автоматически берет на себя многие из этих задач, в том числе:
- Манипуляции с DOM
- Установка наблюдателей и уведомителей
- Валидация входных данных

В то время как Angular упрощает разработку веб-приложений, он задействует сравнительно сложные технологии на стороне клиента, в том числе:
- Отделение данных от логики приложения и представления
- Связывание данных между данными и представлением
- Сервисы (стандартные операции веб-приложения, реализованные в виде замещения объектов)
- Внедрение зависимости (используется в основном для связи вместе с сервисами)
- Расширяемый компилятор HTML (полностью написан на JavaScript)
- Простота тестирования
Раньше подобные методы по большей части отсутствовали на стороне клиента.


# Модули
В большинстве приложений есть главный метод, который создает экземпляр, связывает и загружает приложение. Приложения в Angular не имеют главного исполняемого метода. Модуль выполняет роль декларативного описания того, как приложение должно быть загружено. Есть несколько преимуществ такого подхода:

Процесс более декларативен и прост для понимания
Для модульного тестирования нет необходимости загружать все модули, использующиеся в написании модульных тестов.
Можно подгрузить дополнительные модули, которые переопределят какие-то настройки, облегчая тем самым комплексное (end-to-end) тестирование
Сторонний код можно упаковать в модуль и использовать многократно.
Модули могут быть загружены в произвольном порядке/параллельно (в связи с отсрочкой их выполнения).
