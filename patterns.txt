Выделите аспекты приложения, которые могут изменяться, и отделите их от тех, которые всегда остаются постоянными. Все паттерны обеспечивают возможность изменения некторой части системы независимо от других частей. 

- Инкапсулируйте то, что изменяется.
- Отдавайте предпочтение композиции перед наследованием.
- Программируйте на уровне интерфейсов, а не реализации.
- Стремитесь к слабой связанности взаимодействующих объектов.
- Классы должны быть открыты для расширения, но закрыты для изменения.

ПАТТЕРН СТРАТЕГИЯ определяет семейство алкгоритмов, инкапсулирует каждый из них и обеспечивает их взаимозаменяемость. Он позволяет модифицировать алгоритмы независимо от их использования на стороне клиента. "Для реализации разных вариантов поведения использоуется паттерн Стратегия". Из этой фразы мы узнаем, что поведение инкапсулируется в отдельном наборе классов, который легко расширяется и изменяется - при необходимости даже во время выполнения.

ПАТТЕРН НАБЛЮДАТЕЛЬ определяет отношение "один-ко-многим" между обхъектами таким образом, что при изменении состояния одного объекта происходит автоматическое попвещение и обновление всех зависмых объектов. Если два обхекта могут взаимодействовать, не обладая практически никакой информацией друг о друге, такие объекты называют слабосвязанными. В архитектуре паттерна Наблюдатель между субхъектами и наблюдателями существует слабая связь.

ПАТТЕРН ДЕКОРАТОР динамически наделяет объект новыми возможностями и является гибкой альтернативой субклассированию в области расшриения функциональности. (Пример: классы ввода/вывода Java.)






